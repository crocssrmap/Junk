from queue import PriorityQueue

 

def dijkstra(G, start, goal):

    visited = set()

    cost = {start: 0}

    parent = {start: None}

    todo = PriorityQueue()

 

    todo.put((0, start))

    while todo:

        while not todo.empty():

            _, vertex = todo.get()

            if vertex not in visited:

                break

        else:

            break

        visited.add(vertex)

        if vertex == goal:

            break

        for neighbor, distance in G[vertex]:

            if neighbor in visited:

                continue

            old_cost = cost.get(neighbor, float('inf'))

            new_cost = cost[vertex] + distance

            if new_cost < old_cost:

                todo.put((new_cost, neighbor))

                cost[neighbor] = new_cost

                parent[neighbor] = vertex

 

    return parent

 

def make_path(parent, goal):

    if goal not in parent:

        return None

    v = goal

    path = []

    while v is not None:

        path.append(v)

        v = parent[v]

    return path[::-1]

 

 

g={}

b=int(input('Enter Number of Nodes : '))

z=list(map(str,input('Enter names of node : ').split()))

print()

i=0

while(1):

    t=set()

    if(i==b):

        break

    c=int(input(f'Enter number of nodes connected to {z[i]} : '))

    j=0

    while(1):

        if(j==c):

            break

        x=input(f'{j+1}-->Enter node name connnected to {z[i]} : ')

        y=int(input(f'Weight from {z[i]} to {x} : '))

        l=(x,y)

        t.add(l)

        j=j+1

   

    if len(t)==0:

        g[f"{z[i]}"]={}

    else:

        g[f"{z[i]}"]=t

    print()

    i=i+1

 

   

start=input('Enter starting node : ')

end=input('shortest path to which node : ')

parent = dijkstra(g, start, end)

print(make_path(parent, end))